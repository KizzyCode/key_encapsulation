= libkync
:toc:


== About
image:https://img.shields.io/badge/License-BSD--2--Clause-blue.svg[link="https://opensource.org/licenses/BSD-2-Clause"]
image:https://img.shields.io/badge/License-MIT-blue.svg[link="https://opensource.org/licenses/MIT"]
image:https://travis-ci.org/KizzyCode/kync.svg?branch=master[link="https://travis-ci.org/KizzyCode/kync"]
image:https://ci.appveyor.com/api/projects/status/github/KizzyCode/kync?svg=true[link="https://ci.appveyor.com/project/KizzyCode/kync"]

This crate is a Rust implementation to interface with
https://github.com/KizzyCode/kync/blob/master/Kync.asciidoc[KyNc-compatible] key capsules and plugins. It supports
loading multiple plugins into a pool and provides a Rust API to seal keys/open capsules with them.


== What is the purpose of KyNc and libkync?
Short: Abstracting key management away.

Long: KyNc https://github.com/KizzyCode/kync/blob/master/Kync.asciidoc[defines] and libkync implements an interface,
that allows to use plugins for key management. Your app generates a random key to do something and the user can specify,
how this key is stored. Some users may install a plugin that uses GnuPG to seal the key, some people may load a plugin
that uses a password to encrypt the key, and some companies may use their own custom plugins that integrate perfectly in
their environment. And they only need to do it once â€“ because if specific plugin has been created, it can be used with
all applications that implement KyNc.


== State
This library and standard are alpha and neither audited nor frozen. Use at your own risk and feel free to contribute.


== Known plugins that implement KyNc

 - Currently none â€“ but I'm working on a GnuPG plugin to utilize my Yubikey ðŸ™ƒ